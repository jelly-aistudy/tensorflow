import urllib.request
import zipfile
import tensorflow as tf
from keras_preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from tensorflow.keras.applications import VGG16

url = 'https://storage.googleapis.com/download.tensorflow.org/data/rps.zip'
urllib.request.urlretrieve(url, 'rps.zip')
local_zip = 'rps.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('tmp/')
zip_ref.close()

TRAINING_DIR = "tmp/rps/"
training_datagen = ImageDataGenerator(
     rescale=1./255,
     rotation_range=10,
     width_shift_range=0.1,
     height_shift_range=0.1,
     zoom_range=0.1,
     horizontal_flip=True,
     fill_mode='nearest',
     validation_split=0.2
)

train_generator = training_datagen.flow_from_directory(
     TRAINING_DIR,
     target_size=(150, 150),
     batch_size=128,
     class_mode='categorical',
     subset='training'
)

valid_generator = training_datagen.flow_from_directory(
     TRAINING_DIR,
     target_size=(150, 150),
     batch_size=128,
     class_mode='categorical',
     subset='validation'
)

transfer_model = VGG16(
     include_top=False,
     weights='imagenet',
     input_shape=(150,150,3),
)
transfer_model.trainable=False

model = Sequential([
        transfer_model,
        Flatten(),
        Dropout(0.5),
        Dense(256, activation='relu'),
        Dense(64, activation='relu'),
        Dense(3, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])

ckpath = 'jelly.ckpt'
checkpoint = ModelCheckpoint(filepath=ckpath,
                             save_weights_only=True,
                             save_best_only=True,
                             monitor='val_loss',
                             verbose=1)
    
earlystop = EarlyStopping(monitor='val_loss', patience=7, verbose = 1)

model.fit(train_generator, 
          validation_data=(valid_generator),
          epochs=30,
          callbacks=[checkpoint, earlystop]
)
    
model.load_weights(ckpath)
