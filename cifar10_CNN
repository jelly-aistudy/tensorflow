import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, InputLayer, Dropout
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# load data
cifar10 = tf.keras.datasets.cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
cifar10_labels = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
x_train = x_train/255.0
x_test = x_test/255.0
print(x_train.shape, y_train.shape) # (50000, 32, 32, 3) (50000, 1)

# model
model = tf.keras.Sequential([
                               InputLayer((32, 32, 3)),
                               Conv2D(64, kernel_size=3, strides=1, padding='same', activation='relu'),
                               MaxPooling2D(pool_size=2, strides=2),
                               Conv2D(128, kernel_size=3, strides=1, padding='same', activation='relu'),
                               MaxPooling2D(pool_size=2, strides=2),
                               Conv2D(256, kernel_size=3, strides=1, padding='same', activation='relu'),
                               MaxPooling2D(pool_size=2, strides=2),
                               Conv2D(512, kernel_size=3, strides=1, padding='same', activation='relu'),
                               MaxPooling2D(pool_size=2, strides=2),
                               Flatten(),
                               Dense(1024, activation='relu'),
                               Dropout(0.2),
                               Dense(10, activation='softmax')

])

reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=0.001) # https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ReduceLROnPlateau
earlystop = EarlyStopping(monitor='val_accuracy', patience=5)

model.compile(optimizer='sgd',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
              
history = model.fit(x_train, y_train, epochs = 30, validation_data=(x_test, y_test), callbacks=[reduce_lr, earlystop])

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

# epochs_range = range(epochs)
epochs_range = range(26)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

