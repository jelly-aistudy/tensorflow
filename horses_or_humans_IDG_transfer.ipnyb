import tensorflow as tf
import urllib
import zipfile
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras.applications import VGG16


_TRAIN_URL = "https://storage.googleapis.com/download.tensorflow.org/data/horse-or-human.zip"
_TEST_URL = "https://storage.googleapis.com/download.tensorflow.org/data/validation-horse-or-human.zip"
urllib.request.urlretrieve(_TRAIN_URL, 'horse-or-human.zip')
local_zip = 'horse-or-human.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('tmp/horse-or-human/')
zip_ref.close()
urllib.request.urlretrieve(_TEST_URL, 'validation-horse-or-human.zip')
local_zip = 'validation-horse-or-human.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('tmp/validation-horse-or-human/')
zip_ref.close()

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range = 1,
    width_shift_range = 0.01,
    height_shift_range = 0.01,
    zoom_range = 0.01,
    horizontal_flip = True,
    fill_mode='nearest'
)

validation_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = train_datagen.flow_from_directory(
    'tmp/horse-or-human/',
    target_size=(300, 300),
    batch_size=128,
    class_mode='binary'
)

validation_generator = validation_datagen.flow_from_directory(
    'tmp/validation-horse-or-human/',
    target_size=(300, 300),
    batch_size=128,
    class_mode='binary'
)

transfer_model = VGG16(include_top=False, weights='imagenet', input_shape=(300,300,3))
transfer_model.trainable=False

model = tf.keras.models.Sequential([
     transfer_model,
     Flatten(),
     Dropout(0.5),
     Dense(256, activation='relu'),
     Dense(128, activation='relu'),
     Dense(32, activation='relu'),
     Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])

ckpath = 'jelly.ckpt'
checkpoint = ModelCheckpoint(filepath=ckpath,
                             save_best_only=True,
                             save_weights_only=True,
                             monitor='val_loss',
                             verbose=1)
    
earlystop = EarlyStopping(monitor='val_loss',
                          patience=3,
                          verbose=1)

model.fit(train_generator,
          validation_data=(validation_generator),
          epochs=10,
          callbacks=[checkpoint, earlystop])
    
model.load_weights(ckpath)
