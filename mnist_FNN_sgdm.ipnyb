import tensorflow as tf 
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0
x_train = x_train.reshape(60000,28,28,1)
x_test = x_test.reshape(10000,28,28,1)
y_train = tf.one_hot(y_train, depth=10)
y_test = tf.one_hot(y_test, depth=10)

x_train, x_val = x_train[:50000], x_train[50000:]
y_train, y_val = y_train[:50000], y_train[50000:]

# simple sgd
model_sgd = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28, 1)),
  tf.keras.layers.Dense(50, activation='sigmoid'),
  tf.keras.layers.Dense(10, activation='softmax')
])

model_sgd.compile(optimizer='sgd',loss='categorical_crossentropy', metrics=['acc'])
history_sgd = model_sgd.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10, verbose=1)

# sgd with momentum
model_sgdm = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28, 1)),
  tf.keras.layers.Dense(50, activation='relu'),
  tf.keras.layers.Dense(10, activation='softmax')
]) 

sgdm = tf.keras.optimizers.SGD(learning_rate=1e-5, momentum=0.1)
model_sgdm.compile(optimizer=sgdm, loss='categorical_crossentropy', metrics=['acc'])
history_sgdm = model_sgdm.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10, verbose=1)

def plot_history(histories):
  plt.figure(figsize=(16,10))
  for name, history in histories:
    plt.plot(history.epoch, history.history['val_loss'], label=name.title()) 
  plt.xlabel('Epochs')
  plt.ylabel('Loss')
  plt.legend()
  plt.xlim([0,max(history.epoch)])
  
plot_history([('SGD', history_sgd),
              ('SGD with momentum', history_sgdm)])
