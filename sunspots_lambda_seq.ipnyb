import csv
import tensorflow as tf
import numpy as np
import urllib

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[1:]))
    return ds.batch(batch_size).prefetch(1)
    
url = 'https://storage.googleapis.com/download.tensorflow.org/data/Sunspots.csv'
urllib.request.urlretrieve(url, 'sunspots.csv')

time_step = []
sunspots = []

with open('sunspots.csv') as csvfile:
   reader = csv.reader(csvfile, delimiter=',')
   next(reader)
   for row in reader:
     sunspots.append(float(row[2]))
     time_step.append(float(row[0]))

series = np.array(sunspots)
time = np.array(time_step)

split_time = 3000
time_train = time[:split_time]
x_train = series[:split_time]
time_valid = time[split_time:]
x_valid = series[split_time:]

window_size = 30
batch_size = 32
shuffle_buffer_size = 1000

tf.keras.backend.clear_session()
tf.random.set_seed(1)
np.random.seed(1)
train_set = windowed_dataset(x_train, window_size=window_size, batch_size=batch_size, shuffle_buffer=shuffle_buffer_size)
valid_set = windowed_dataset(x_valid, window_size=window_size, batch_size=batch_size, shuffle_buffer=shuffle_buffer_size)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv1D(60, kernel_size=3, padding='causal', activation='relu', input_shape=[None, 1]),
    tf.keras.layers.LSTM(60, return_sequences=True),
    tf.keras.layers.LSTM(60, return_sequences=True),
    tf.keras.layers.Dense(30, activation='relu'),     
    tf.keras.layers.Dense(10, activation='relu'),                             
    tf.keras.layers.Dense(1),
    tf.keras.layers.Lambda(lambda x: x * 400)
])

optimizer = tf.keras.optimizers.SGD(learning_rate=1e-5, momentum=0.9)

model.compile(optimizer=optimizer, loss=tf.keras.losses.Huber(), metrics=['mae'])

ckpath = 'jelly.ckpt'
checkpoint = tf.keras.callbacks.ModelCheckpoint(filepath=ckpath,
                                                save_best_only=True,
                                                save_weights_only=True,
                                                monitor='val_mae',
                                                verbose=1)
                                                
earlystop = tf.keras.callbacks.EarlyStopping(monitor='val_mae', patience=20)

model.fit(train_set, validation_data=(valid_set), epochs=100, callbacks=[checkpoint, earlystop])

model.load_weights(ckpath)
