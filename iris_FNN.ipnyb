import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping

dataset_name = 'iris'
train_data = tfds.load(dataset_name, split='train[:80%]')
valid_data = tfds.load(dataset_name, split='train[80%:]')

def preprocess(data):
    x = data['features']
    y = data['label']
    y = tf.one_hot(y, 3)

    return x, y

train_dataset = train_data.map(preprocess).batch(10)
valid_dataset = valid_data.map(preprocess).batch(10)

model = Sequential([
    Dense(1024, activation='relu', input_shape=(4,)),
    Dense(512, activation='relu'),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(256, activation='relu'),
    Dense(64, activation='relu'),
    Dense(64, activation='relu'),
    Dense(3, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])

ckpath = 'jelly.ckpt'
checkpoint = ModelCheckpoint(filepath=ckpath,
                             save_weights_only=True,
                             save_best_only=True,
                             monitor='val_loss',
                             verbose=1)
    
earlystop = EarlyStopping(monitor='val_loss', patience=30)
model.fit(train_dataset,
          validation_data=(valid_dataset),
          epochs=50,
          callbacks=[checkpoint, earlystop])
    
model.load_weights(checkpoint_path)
